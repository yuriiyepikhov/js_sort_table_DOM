{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCIA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAG/B,EAAa,EAFN,EAAM,IAAI,EAIvB,EAAU,KAAK,GACf,EAAU,GAAG,GAEb,IAAM,EAAQ,EAAM,KAAK,CACnB,EAAQ,EAAM,OAAO,CAAC,EAAE,CAE9B,EAAM,gBAAgB,CAAC,QAAS,SAAC,CAAjC,EAKE,AAFwB,AAO1B,CAAA,SAAc,CAAM,CAAE,CAAK,EACzB,IAAM,EAAgB,EAAG,GAEzB,OAAQ,GACN,IAAK,OACH,OAAO,EAAa,IAAI,CAAC,SAAC,CAAA,CAAS,CAAnC,EACE,IAAM,EAAQ,EAAQ,KAAK,CAAC,EAAE,CAAC,SAAS,CAClC,EAAQ,EAAQ,KAAK,CAAC,EAAE,CAAC,SAAS,CAExC,OAAO,EAAM,aAAa,CAAC,EAC7B,EAEF,KAAK,WACH,OAAO,EAAa,IAAI,CAAC,SAAC,CAAA,CAAS,CAAnC,EACE,IAAM,EAAY,EAAQ,KAAK,CAAC,EAAE,CAAC,SAAS,CACtC,EAAY,EAAQ,KAAK,CAAC,EAAE,CAAC,SAAS,CAE5C,OAAO,EAAU,aAAa,CAAC,EACjC,EAEF,KAAK,MACH,OAAO,EAAa,IAAI,CAAC,SAAC,CAAA,CAAS,CAAnC,EAIE,MAAO,AAHM,CAAC,EAAQ,KAAK,CAAC,EAAE,CAAC,SAAS,CAC3B,CAAC,EAAQ,KAAK,CAAC,EAAE,CAAC,SAAS,AAG1C,EAEF,KAAK,SACH,OAAO,EAAa,IAAI,CAAC,SAAC,CAAA,CAAS,CAAnC,EAOE,MAAO,AALS,CAAC,AADE,EAAQ,KAAK,CAAC,EAAE,CAAC,SAAS,CACjB,OAAO,CAAC,IAAK,IAAI,OAAO,CAAC,IAAK,IAG1C,CAAC,AADE,EAAQ,KAAK,CAAC,EAAE,CAAC,SAAS,CACjB,OAAO,CAAC,IAAK,IAAI,OAAO,CAAC,IAAK,GAG5D,EAEF,SACE,OAAO,CACX,CACF,CAAA,EAjD+B,EAAW,AAFzB,EAAE,MAAM,CAEwB,SAAS,EAExC,OAAO,CAAC,SAAC,CAAzB,EACE,EAAM,MAAM,CAAC,EACf,EACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// write code here\nvar table = document.querySelector(\"table\");\nvar rows = table.rows;\nvar employees = _to_consumable_array(rows);\nemployees.shift();\nemployees.pop();\nvar thead = table.tHead;\nvar tbody = table.tBodies[0];\nthead.addEventListener(\"click\", function(e) {\n    var header = e.target;\n    var sortedEmployees = sort(employees, header.innerText);\n    sortedEmployees.forEach(function(employee) {\n        tbody.append(employee);\n    });\n});\nfunction sort(people, query) {\n    var sortedPeople = _to_consumable_array(people);\n    switch(query){\n        case \"Name\":\n            return sortedPeople.sort(function(person1, person2) {\n                var name1 = person1.cells[0].innerText;\n                var name2 = person2.cells[0].innerText;\n                return name1.localeCompare(name2);\n            });\n        case \"Position\":\n            return sortedPeople.sort(function(person1, person2) {\n                var position1 = person1.cells[1].innerText;\n                var position2 = person2.cells[1].innerText;\n                return position1.localeCompare(position2);\n            });\n        case \"Age\":\n            return sortedPeople.sort(function(person1, person2) {\n                var age1 = +person1.cells[2].innerText;\n                var age2 = +person2.cells[2].innerText;\n                return age1 - age2;\n            });\n        case \"Salary\":\n            return sortedPeople.sort(function(person1, person2) {\n                var salaryStr1 = person1.cells[3].innerText;\n                var salary1 = +salaryStr1.replace(\"$\", \"\").replace(\",\", \"\");\n                var salaryStr2 = person2.cells[3].innerText;\n                var salary2 = +salaryStr2.replace(\"$\", \"\").replace(\",\", \"\");\n                return salary1 - salary2;\n            });\n        default:\n            return sortedPeople;\n    }\n}\n\n//# sourceMappingURL=index.20153b80.js.map\n","'use strict';\n\n// write code here\n\nconst table = document.querySelector('table');\nconst rows = table.rows;\n\nconst employees = [...rows];\n\nemployees.shift();\nemployees.pop();\n\nconst thead = table.tHead;\nconst tbody = table.tBodies[0];\n\nthead.addEventListener('click', (e) => {\n  const header = e.target;\n\n  const sortedEmployees = sort(employees, header.innerText);\n\n  sortedEmployees.forEach((employee) => {\n    tbody.append(employee);\n  });\n});\n\nfunction sort(people, query) {\n  const sortedPeople = [...people];\n\n  switch (query) {\n    case 'Name':\n      return sortedPeople.sort((person1, person2) => {\n        const name1 = person1.cells[0].innerText;\n        const name2 = person2.cells[0].innerText;\n\n        return name1.localeCompare(name2);\n      });\n\n    case 'Position':\n      return sortedPeople.sort((person1, person2) => {\n        const position1 = person1.cells[1].innerText;\n        const position2 = person2.cells[1].innerText;\n\n        return position1.localeCompare(position2);\n      });\n\n    case 'Age':\n      return sortedPeople.sort((person1, person2) => {\n        const age1 = +person1.cells[2].innerText;\n        const age2 = +person2.cells[2].innerText;\n\n        return age1 - age2;\n      });\n\n    case 'Salary':\n      return sortedPeople.sort((person1, person2) => {\n        const salaryStr1 = person1.cells[3].innerText;\n        const salary1 = +salaryStr1.replace('$', '').replace(',', '');\n\n        const salaryStr2 = person2.cells[3].innerText;\n        const salary2 = +salaryStr2.replace('$', '').replace(',', '');\n\n        return salary1 - salary2;\n      });\n\n    default:\n      return sortedPeople;\n  }\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","table","document","querySelector","employees","rows","shift","pop","thead","tHead","tbody","tBodies","addEventListener","e","sortedEmployees","sort","people","query","sortedPeople","person1","person2","name1","cells","innerText","name2","localeCompare","position1","position2","age1","salary1","salaryStr1","replace","salaryStr2","header","target","forEach","employee","append"],"version":3,"file":"index.20153b80.js.map"}